// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model TweetedRequest {
  id                        String        @id @default(cuid())
  requestedUserTwitterID    String
  requestedUserProfileImage String?
  requestedUserScreenName   String?
  tweetID                   String?
  tweetTextWithoutURL       String?
  tweetAuthorId             String?
  tweetUserName             String?
  tweetVerified             Boolean
  tweetProfileImageUrl      String?
  tweetMediaFile            String?
  tweetUserId               String?
  statusURL                 String?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  mugsGenerated             MugsGenerated @default(PENDING)
  bannerBear                BannerBear[]
}

model WooCommerce {
  id                      String  @id @default(cuid())
  requestedUserTwitterID  String
  wooCommerceCategoryID   Int?
  wooCommerceCategoryName String?
}

model BannerBear {
  id                     String          @id @default(cuid())
  requestedUserTwitterID String?
  generatedBannerUID     String?
  templateId             String?
  status                 String?
  image_url_png          String?
  image_url_jpg          String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  TweetedRequest         TweetedRequest? @relation(fields: [tweetedRequestId], references: [id])
  tweetedRequestId       String
  cloudinary             Cloudinary[]
}

model Cloudinary {
  id            String      @id @default(cuid())
  publicID      String?
  uploadedBBURL String?
  imageURLFinal String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  BannerBear    BannerBear? @relation(fields: [bannerBearId], references: [id])
  bannerBearId  String?
}

enum MugsGenerated {
  PENDING
  COMPLETED
  FAILED
}
